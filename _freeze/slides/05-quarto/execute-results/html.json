{
  "hash": "fc30c256f7ba12654f4034036b71cc59",
  "result": {
    "markdown": "---\ntitle: \"Quarto ðŸ“–\"\nsubtitle: \"MATH/COSC 3570 Introduction to Data Science\"\nauthor: \"Dr. Cheng-Han Yu <br> Department of Mathematical and Statistical Sciences <br> Marquette University\"\n# date: \"December 23 2023\"\n# macros: _macros.tex # import a list of TeX/LaTeX definitions\nformat: \n  revealjs:\n    #     - \"macros.tex\"\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    # include-in-header:\n    highlight-style: github\n    code-block-bg: true\n    self-contained: false\n    slide-number: c/t\n    incremental: false\n    width: 1800\n    height: 1000\n    margin: 0.05\n    logo: \"https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg\"\n    footer: \"[math3570-s24.github.io/website](https://math3570-s24.github.io/website/)\"\n    theme: [\"simple\", \"slides.scss\"]\n    multiplex: true\n    code-link: true\n    transition: none ## fade slide convex concave zoom\n    title-slide-attributes:\n      data-background-color: \"#447099\"\n      # data-background-image: images/paper-texture.jpg\n      # data-background-size: cover\n      # data-background-color: \"#698ED5\"\neditor: source\nexecute:\n  echo: false\n  freeze: true\nfig-cap-location: bottom\n---\n\n\n#  {visibility=\"hidden\"}\n\n\\def\\bx{\\mathbf{x}}\n\\def\\bg{\\mathbf{g}}\n\\def\\bw{\\mathbf{w}}\n\\def\\bbeta{\\boldsymbol \\beta}\n\\def\\bX{\\mathbf{X}}\n\\def\\by{\\mathbf{y}}\n\\def\\bH{\\mathbf{H}}\n\\def\\bI{\\mathbf{I}}\n\\def\\bS{\\mathbf{S}}\n\\def\\bW{\\mathbf{W}}\n\\def\\T{\\text{T}}\n\\def\\cov{\\mathrm{Cov}}\n\\def\\cor{\\mathrm{Corr}}\n\\def\\var{\\mathrm{Var}}\n\\def\\E{\\mathrm{E}}\n\\def\\bmu{\\boldsymbol \\mu}\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\n\\def\\Trace{\\text{Trace}}\n\n\n\n\n\n\n\n# Hello Quarto {background-color=\"#A7D5E8\"}\n\n::: center\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/thumbs/quarto.png){width=\"350\"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/rmarkdown.png){width=\"350\"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/knitr.png){width=\"350\"}\n:::\n\n::: notes\nWhy Quarto is a Amazing Tool for Data Science Basic syntax: Markdown and Code \n\n- Last time we learned git and github to version control our documents. \n\n- You first grab hw0 from github, and load it into Rstudio as a project. In the document hw0, you actually opened an Quarto file, right, you make changes, revise it and keep track of your changes by making commits. Then finally you send your updated version of document back to github, so that the version locally in your computer is synchronized with the one in your github. right? \n\n- Today we are going to talk about Quarto, the one you opened last time. \n\n- I'll introduce some basic stuff, and you'll learn how to generate a beautiful html or PDF report that includes code, tables, figures generated by the code all together. \n\n- And each of your homework sets will be a Rmd file. That's why I talk about Quarto before we actually touch data and do data analysis. \n\n- Let's learn this great tool together!\n:::\n\n## Sharing Data Science Products using Quarto\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/r4ds/main/diagrams/data-science/communicate.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: notes\n-   Remember that in DS, our ultimate goal is share our data science outputs and communicate with others.\n-   Today, we are going to learn R Markdown that is an amazing tool for generating various different kinds of data science output.\n:::\n\n## What and Why -- Full Reproducibility\n\n::: columns\n::: {.column width=\"50%\"}\n-   **\\[What\\]** data science publishing system\n-   Use a [single]{style=\"color:green\"} Quarto file (`.qmd`) to\n    -   weave together narrative *text* and *code*\n    -   produce elegantly formatted outputs: word/pdf, webpages, blogs, books, etc.\n-   **\\[Why\\]** **Fully reproducible** reports\n    -   Have *code*, *results*, and *text* in the same document\n    -   Results are generated from the source code, and your documents are [automatically]{style=\"color:green\"} updated if your data or code changed.\n:::\n\n::: {.column width=\"50%\"}\n::: logo\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/thumbs/quarto.png){fig-align='center' width=70%}\n:::\n:::\n\n:::\n:::\n:::\n\n::: notes\n-   WHAT\n-   Remember in the last stage of DS, we need to communicate our DS results with others.\n-   Rmd is a very useful communication tool that integrates prose/words, code, and analysis results.\n-   WHY\n-   Results are generated from the source code, and your documents are **automatically** updated if your data changed.\n-   So if your data or code changed, or you need to redo your analysis or rerun your algorithm, you don't need to actually redo your analysis and copy all of your numbers, tables and figures generated from your code and paste them manually to your Word or Powerpoint file.\n-   Since your code, results, and text are all in one Rmd file, if your data change, your results will be automatically updated with that change. No more copy and paste.\n-   This greatly saves lots of time. Also, it reduces the chance of making mistakes of copying and pasting, and increases reproducibility of your study, meaning that your code can produce exactly the same result shown in your document.\n-   Literate Programming\n:::\n\n## \n\n<iframe width=\"1800\" height=\"1000\" src=\"https://www.youtube.com/embed/s3JldKoA0zw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n\n## Why Quarto -- Various Types of Output\n\n-   Support dozens of static and dynamic/interactive output formats!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/rmarkdown_output.png){fig-align='center' width=45%}\n:::\n:::\n\n\n::: notes\n-   One more reason to use R Markdown is Rmd can generate various types of output!\n-   It can produce a PDF, blog, HTML. It can generate slides, website, dashboard, word document, e-books. You name it!\n-   So once you learn this Rmarkdown, you can prepare any type of output you want for different purposes. You can prepare a paper for submitting it to a journal, prepare slides for your presentation, prepare a website/dashboard for data science results.\n-   It's really handy! In fact, the slides I make for this course are all Rmd files.\n:::\n\n## Why Quarto[^1] -- Integrate Multiple Languages\n\n[^1]: Quarto is actually a **command line interface** that can render `.qmd` files into different output formats using commands in terminal.\n\n![](images/05-quarto/horst_quarto_schematic.png)\n\n## Quarto Is Built on [Pandoc](https://pandoc.org/)\n\n-   R uses `knitr` and Python/Julia uses `Jupyter` to evaluate our code and turn `qmd` into `md` file.\n\n![](images/05-quarto/horst_qmd_render_schema.png)\n\n::: notes\n-   So what does R Markdown do so amazingly for us?\n-   When we hit Knit, your Rmd first uses the knitr package to execute and translate our code, and then creates a new markdown document which includes the code and its output.\n-   The markdown file is then processed by a document converter called pandoc which is responsible for creating various document format you like.\n-   The entire process looks and sounds complicated, and indeed it's complicated. But Rmd makes it simple. All we need is to click on the Knit button, and Rmd does everything for us.\n:::\n\n## Why Quarto -- Comfort of Your Own Workspace\n\n::: r-stack\n![](https://quarto.org/docs/tools/images/rstudio-preview.png){width=\"1500\" fig-alt=\"A screenshot of a Quarto document rendered inside RStudio\"}\n\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){.fragment width=\"1500\" fig-alt=\"A screenshot of a Quarto document rendered inside JupyterLab\"}\n\n![](https://quarto.org/docs/computations/images/python-vscode.png){.fragment width=\"1500\" fig-alt=\"A screenshot of a Quarto document rendered inside VSCode\"}\n:::\n\n## Why Quarto -- Simple Markdown Syntax for Text\n\nTo generate a PDF report, you prefer writing this with 24 lines...\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/pdf_output.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/qmd_source.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::\n\n::: notes\n-   Another reason to use R Markdown is that its syntax is simple.\n-   We can generate this PDF report including code and figures using this concise Rmd file on the right.\n:::\n\n## Why Quarto -- Simple Markdown Syntax for Text\n\nOr this with 250 lines!?\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/pdf_output.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/tex_source.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::\n\n::: notes\n-   We can also generate the same PDF report using this document processing format.\n-   Which one you prefer?\n-   Does anyone know what tool is used for generating the PDF? It's called LaTex.\n-   You can see the Rmd file is cleaner and much more concise.\n:::\n\n## Markdown\n\n::: columns\n::: {.column width=\"70%\"}\n-   Quarto is based on **markdown**, a markup language that is widely used to generate HTML pages.\n-   Markdown is a lightweight and easy-to-use syntax for styling the writing on the GitHub platform.\n-   We go through basic (Pandoc's) Markdown syntax together, and you can learn more at:\n    -   [Markdown Tutorial](https://www.markdowntutorial.com/)\n    -   [Mastering Markdown GitHub Guides](https://guides.github.com/features/mastering-markdown/)\n    -   [Markdown Guide](https://www.markdownguide.org/getting-started/)\n:::\n\n::: {.column width=\"30%\"}\n<br>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/markdown.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n\n::: notes\n-   In my opinion, comparing to HTML, Markdown format is more friendly and easier to learn.\n:::\n\n## Quarto file = plain text file with extension *.qmd*\n\n    ---\n    title: \"ggplot2 demo\"\n    date: \"1/22/2023\"\n    format: html\n    ---\n\n    ## Cars\n    There is a relationship between *miles per gallon* and *displacement*.\n\n    ```{{r}}\n    mpg |> ggplot(aes(x = displ, y = hwy)) + \n      geom_point()\n    ```\n\n\n. . .\n\n::: {style=\"background: #a13c6530; width: 500px; height: 180px; margin: 5px; position: absolute; top: 105px; left: 0px;\"}\n:::\n\n:::{.midi}\n[**YAML Header (\"YAML Ain't Markup Language\")**]{.pink}\n\n``` yaml\n---\nkey: value\n---\n```\n:::\n\n\n::: notes\n-   The first part is the YAML header, which is surrounded by a pair of three dashes.\n-   YAML is a human readable language that is commonly used in configuration files of programs.\n-   Here, YAML header defines metadata of the document, for example, title, date, and output format.\n:::\n\n. . .\n\n::: {style=\"background: rgba(63, 151, 252, 0.3); width: 1400px; height: 110px; margin: 5px; position: absolute; top: 300px; left: 0px;\"}\n:::\n\n:::{.midi}\n[**Markdown Text**]{.blue}\n:::\n\n\n::: notes\n-   The second part is text.\n-   And as we've discussed, the syntax for text is Markdown. We'll learn some basic syntax later.\n:::\n\n. . .\n\n::: {style=\"background: #6a9c4230; width: 850px; height: 170px; margin: 5px; position: absolute; top: 420px; left: 0px;\"}\n:::\n\n:::{.midi}\n[**Code Chunk**]{.green}\n\n\n::: {.cell layout-align=\"center\"}\n\n````{.cell-code}\n```{{r}}\n## code right here\n```\n````\n:::\n\n:::\n\n\n::: notes\n-   The third main part of a Rmd document is the so-called code chunk. which is surrounded by a pair of three backticks.\n-   The code written in code chunks will be run once you compile your Rmd file, and any output generated by your code will be printed out in the final document. All right!\n-   Any questions\n:::\n\n## \n\n::: lab\n[ **02-Quarto File** ]{style=\"color:blue\"}\n\n- Go to your GitHub repo **lab-yourusername**. Clone it to your Posit Cloud as a project in 2024-Spring-Math-3570 workspace.\n\n- Open the file **lab.qmd**.\n\n- Change `author` in YAML.\n\n<!-- - Go to your **3570-project** in **2022-spring-math-3570** workspace in Posit Cloud. -->\n\n<!-- - Copy the code  -->\n\n<!-- -   ![](images/05-quarto/new_file_icon.png) \\> Quarto Document (or File \\> New File \\> Quarto Document) -->\n\n<!-- -   Title: **lab02-quarto** -->\n\n<!-- -   Author: **your name** -->\n\n<!-- -   Click on OK. You should see a template in the file. -->\n\n<!-- -   Save your file named as **lab02-quarto.qmd**. -->\n\n- Click on ![](images/05-quarto/render.png) or `Ctrl/Cmd + Shift + K` to produce a HTML document.\n\n- How can we show the current date every time we compile the file? *\\[Hint:\\]* Check your *hw00*. Compile your document and make sure the date shows up.\n\n- How do we produce a *pdf*? Describe it in `## Lab 2: Quarto`\n\n- Once done, commit with message [_\"02-Quarto File\"_]{style=\"color:green\"} and push your version to GitHub.\n:::\n\n::: notes\n-   Click on the **inverted triangle** right next to ![](img/knit_icon.png) to produce a PDF/Word document.\n\n``` markdown\nr Sys.Date()\n```\n\ndate: \"2023-12-23\"\n:::\n\n## Text Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n|     > here is the quote           | > here is the quote           |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+---------------------+-----------------+\n| Markdown Syntax     | Output          |\n+=====================+=================+\n|     # Header 1      | # Header 1      |\n+---------------------+-----------------+\n|     ## Header 2     | ## Header 2     |\n+---------------------+-----------------+\n|     ### Header 3    | ### Header 3    |\n+---------------------+-----------------+\n|     #### Header 4   | #### Header 4   |\n+---------------------+-----------------+\n|     ##### Header 5  | ##### Header 5  |\n+---------------------+-----------------+\n|     ###### Header 6 | ###### Header 6 |\n+---------------------+-----------------+\n\n## Lists\n\n::: midi\n+-------------------------------------+---------------------------------+\n| Markdown Syntax                     | Output                          |\n+=====================================+=================================+\n|     * unordered list                | -   unordered list              |\n|         + sub-item 1                |                                 |\n|         + sub-item 2                |     -   sub-item 1              |\n|             - sub-sub-item 1        |                                 |\n|                                     |     -   sub-item 2              |\n|                                     |                                 |\n|                                     |         -   sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     *   item 2                      | -   item 2                      |\n|         <new line>                  |                                 |\n|         Continued (indent 4 spaces) |     Continued (indent 4 spaces) |\n+-------------------------------------+---------------------------------+\n|     1. ordered list                 | 1.  ordered list                |\n|     2. item 2                       |                                 |\n|         i) sub-item 1               | 2.  item 2                      |\n|              A.  sub-sub-item 1     |                                 |\n|                                     |     i.  sub-item 1              |\n|                                     |                                 |\n|                                     |         A.  sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n:::\n\n## Math and Links\n\n::: columns\n::: {.column width=\"50%\"}\n**Markdown syntax**\n\n```{.markdown code-line-numbers=\"false\"}\ninline-math: $A = r^{2}$\n```\n<!-- inline-math: \\$A = r\\^{2}\\$\\ -->\n<br>\n\n```{.markdown code-line-numbers=\"false\"}\nmath-block: \n\n$$A = r^{2}$$\n```\n<br>\n\n\\<https://www.google.com \\> <br>\n\n<br> \\[Google link\\](https://www.google.com)\n\n:::\n\n::: {.column width=\"50%\"}\n**Output**\n\ninline-math: $A = r^{2}$\\\n<br> math-block: $$A = r^{2}$$ <br> <https://www.google.com>\\\n<br> [Google link](https://www.google.com)\\\n<br>\n:::\n:::\n\n## Tables\n\n::: columns\n::: {.column width=\"50%\"}\n    | Right | Left | Default | Center |\n    |------:|:-----|---------|:------:|\n    |   12  |  12  |    12   |    12  |\n    |  123  |  123 |   123   |   123  |\n    |    1  |    1 |     1   |     1  |\n:::\n\n::: {.column width=\"50%\"}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n:::\n:::\n\n## Grid tables^[If you prefer, you can use **visual** editing mode instead of **source** mode.]   {visibility=\"hidden\"}\n\n    +---------------+---------------+--------------------+\n    | Fruit         | Price         | Advantages         |\n    +===============+===============+====================+\n    | Bananas       | $1.34         | - built-in wrapper |\n    |               |               | - bright color     |\n    +---------------+---------------+--------------------+\n    | Oranges       | $2.10         | - cures scurvy     |\n    |               |               | - tasty            |\n    +---------------+---------------+--------------------+\n\n    : Sample grid table.\n\n+---------------+---------------+----------------------+\n| Fruit         | Price         | Advantages           |\n+===============+===============+======================+\n| Bananas       | \\$1.34        | -   built-in wrapper |\n|               |               | -   bright color     |\n+---------------+---------------+----------------------+\n| Oranges       | \\$2.10        | -   cures scurvy     |\n|               |               | -   tasty            |\n+---------------+---------------+----------------------+\n\n: Sample grid table.\n\n\n## Source vs. Visual Mode\n\n**Source Mode**\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/mode-source-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n[**Visual Mode**](https://quarto.org/docs/visual-editor/) (What You See Is What You Mean (WYSIWYM))\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/mode-visual-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n## Data as Table\n\n`knitr::kable()` can turn dataframes into tables.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(mtcars) |> \n    knitr::kable()\n```\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|   wt| qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|----:|----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.62| 16.5|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.88| 17.0|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.32| 18.6|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.21| 19.4|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.44| 17.0|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.46| 20.2|  1|  0|    3|    1|\n:::\n:::\n\n\n\n##\n::: lab\n\n<span style=\"color:blue\"> **03-Markdown** </span>\n\n- Back to your **lab.qmd**. In `## Lab 3: Markdown` section, add a self-introduction paragraph containing a header, **bold** and *italic* text.\n\n- Add another paragraph that contains\n  - listed items\n  - a hyperlink\n  - a blockquote\n  - math expression\n  \n- Once done, commit with message [_\"03-Markdown\"_]{style=\"color:green\"} and push your updated work to GitHub.\n:::\n\n\n# Code\n\n## Anatomy of a Code Chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-stuff\n#| echo: false\nmtcars |> \n  distinct(cyl)\n```\n````\n\n<br>\n\n````md\n```{{python}}\n#| label: string\n#| eval: false\nx = 'hello, python world!'\nprint(x.split(' '))\n```\n````\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n- Has 3x backticks  ```` ``` ````  on each end\n\n\n- To insert a code chunk, \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/05-quarto/insert_icon.png){fig-align='center' width=20%}\n:::\n:::\n\n\n- `Alt + Ctrl + I` (Win) \n\n- `Option + Cmd + I` (Mac)\n\n- Indicate engine (`r`) between curly braces `{r}`  \n\n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n- **Tool > Modify Keyboard Shortcuts > search Chunk > Insert Chunk Python >** `Cmd + P`\n:::\n\n::::\n\n## Option `echo`\n\n- If you simply want code highlighting, you can use 3x backticks + the language ```` ```r ````\n\n. . .\n\n    ```r\n    head(mtcars)\n    ```\n\n. . .\n\nWhich returns the below but is not executed since there aren't `{}` around the language:\n\n``` r\nhead(mtcars)\n```\n\n. . .\n\n<br>\n\n- If you instead want to see source code and evaluate it, you could use `echo: true` where `echo: false` would instead hide the code but still evaluate it.\n\n    ```{{r}}\n    #| echo: true\n    1 + 1\n    ```\n\n<br>\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n## Chunk Options\n\n- The following table summarises which types of output each option **suppresses**:\n\n|Option            | Run code | Show code | Output | Plots | Messages | Warnings |\n|:---------------- |:--------:|:---------:|:------:|:-----:|:--------:|:--------:|\n|`eval: false`     | x        |           | x      | x     | x        | x        | \n|`include: false`  |          | x         | x      | x     | x        | x        |\n|`echo: false`     |          | x         |        |       |          |          |\n|`results: \"hide\"` |          |           | x      |       |          |          |\n|`fig-show: \"hide\"`|          |           |        | x     |          |          |\n|`message: false`  |          |           |        |       | x        |          |\n|`warning: false`  |          |           |        |       |          | x        |\n\n- Check [knitr](https://yihui.org/knitr/options/) for more chunk options.\n\n\n::: notes\n- Here shows some code chunk options. \n- The table summarises which types of output each option **suppresses**.\n- So eval = FALSE means that the code is not run, but the code is still shown in the compiled document. Because the code is not run, there will be no output, no plots, no messages and no warnings.\n- When include = FALSE, the code will be run, but nothing will be included in the final document.\n- When echo = FALSE, the code will not be shown in the document, but it will be run, and all results will be shown in the document.\n- You get the idea, right. \n- So results controls output, fig.show controls plots, message and warning control if messages and warnings are shown.\n- There are so many chunk options out there. If you want to learn more, definitely check this knitr website. OK\n:::\n\n\n\n## Global Options: execute\n\n- Should be specified within the `execute` key. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/05-quarto/globaloption.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n``` yaml\n---\nexecute: \n  echo: false\n  eval: false\n---\n```\n\n- Check [HTML Options](https://quarto.org/docs/reference/formats/html.html) for more options!\n\n\n\n::: notes\n````md\n```{{r}}\n#| label: setup\n#| include: false\n# don't show code unless we explicitly set echo = TRUE\nknitr::opts_chunk$set(echo = FALSE)\n```\n````\n\n- `knitr::opts_chunk$set()` sets default options for all chunks.\n:::\n\n## Images\n\n\nBasic markdown syntax:\n\n    ![Maru](images/05-quarto/maru1.jpg)\n\n![Maru](images/05-quarto/maru1.jpg)\n\n\n## Figures w/ code\n\n\n::: {.cell layout-align=\"right\"}\n\n````{.cell-code}\n```{{r}}\n#| out-width: \"40%\"\n#| fig-align: right\n\nknitr::include_graphics(\"images/05-quarto/maru1.jpg\")\n```\n````\n\n::: {.cell-output-display}\n![](images/05-quarto/maru1.jpg){fig-align='right' width=40%}\n:::\n:::\n\n\n## Including Plots\n- Many chunk options for figures and images start with `fig-`, for example `fig-width`, `fig-height`, `fig-show`, etc.\n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n#| fig-align: center\n#| fig-cap: \"Fig. 1: A plot of car stuff\"\nplot(x = cars$speed, y = cars$dist)\n```\n````\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Fig. 1: A plot of car stuff](images/05-quarto/unnamed-chunk-19-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n::::\n\n\n\n## [Divs and Spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)\n\n    This is text with [special]{style=\"color:red\"} formatting.\n\nThis is text with [special]{style=\"color:red\"} formatting.\n\n. . .\n\n<br>\n\n\n    ::: {style=\"color:red\"}\n    This content can be styled with a border\n    :::\n\n\n\n::: {style=\"color:red\"}\nThis content can be styled with a border\n:::\n\n\n. . .\n\n### Divs and Spans\n\n-   Think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF\n-   `[text]{.class}` spans can be thought of a `<span .class>Text</span>`\n\n\n    ```markdown\n    ::: {.border}\n    This content can be styled with a border\n    :::\n    \n    <div class=\"border\">\n      <p>This content can be styled with a border</p>\n    </div>\n    ```\n\n\n::: notes\n    <!-- ::: {style=\"border-left:10px solid red\"} -->\n    <!-- This content can be styled with a border -->\n    <!-- ::: -->\nDivs start with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The Div ends with another line containing a string of at least three consecutive colons. The Div should be separated by blank lines from preceding and following blocks.\n\n:::\n\n<!-- ## -->\n\n<!-- ::: callout-note -->\n<!-- Note that there are five types of callouts, including: -->\n<!-- ::: -->\n\n## Subfigures Fenced div Class\n\n    ::: {#fig-maru layout-ncol=2}\n    \n    ![Loaf](images/05-quarto/maru2.jpg){#fig-loaf width=\"250px\"}\n    \n    ![Lick](images/05-quarto/maru3.jpg){#fig-lick width=\"250px\"}\n    \n    Two states of Maru\n    \n    :::\n    \n\n::: {#fig-maru layout-ncol=2}\n\n![Loaf](images/05-quarto/maru2.jpg){#fig-loaf width=\"350px\"}\n\n![Lick](images/05-quarto/maru3.jpg){#fig-lick width=\"350px\"}\n\nTwo states of Maru\n\n:::\n\n\n\n## Inline Code\n- Inside your text you can include code with the syntax <span>&#96;</span>r your-r-code&#96;.\n- For example, <span>&#96;</span>r 4 + 5&#96; would output 9 in your text.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n```\n:::\n\n```{.r .cell-code}\nnum_cars <- nrow(cars)\n```\n:::\n\n\n. . .\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Code in Quarto**\n\nThere are <span>&#96;</span>r num_cars&#96; rows in the `cars` dataset. Four plus five is <span>&#96;</span>r 4 + 5&#96;\n:::\n\n\n\n::: {.column width=\"50%\"}\n\n**Output**\n\nThere are 50 rows in the `cars` dataset. Four plus five is 9\n:::\n\n:::::\n\n\n::: notes\n- We;ve learned that Inside your text you can include code, and inline code is created with backticks. \n- In fact, the inline code can actually execute code, if we put r in the first place.\n- For example, 9 would output 9 in your text.\n:::\n\n\n\n\n##\n::: {.lab}\n\n<span style=\"color:blue\"> **04-Code Chunk** </span>\n\n- In **lab.qmd** `## Lab 4: Code Chunk`, use code chunks to\n\n  - include an image with `knitr::include_graphics(\"URL or file path\")`\n  <https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png>\n  \n  - include a plot `plot(mtcars$disp, mtcars$mpg)`\n  \n  - Show dataset `mtcars` as a table using `knitr::kable()`\n  \n  - do some inline code calculation like <span>&#96;</span>r ncol(mtcars)&#96;, <span>&#96;</span>r log(100, base = 10) + sqrt(4)&#96;.\n  \n- Add option `fig-height: 4`, `fig-width: 6` and `fig-align: right` to your plot. What are the changes?\n\n- How do we set global chunk options to hide and run code in every chunk?\n\n- Once done, commit with message [_\"04-Code Chunk\"_]{style=\"color:green\"} and push your work to GitHub.\n:::\n\n\n\n\n::: notes\n<!-- - The workspace of your R Markdown document is separate from the Console! -->\n- Run the following in the console\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\nThen, add the following chunk in your **lab02-rmarkdown.Rmd** and re-knit it.\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\nWhat happens?\n- The environment of your R Markdown document is separate from the Console! Remember this, and expect it to bite you a few times as you're learning to work with R Markdown!\n- fig.dim = c(8, 6) means fig.width = 8 and fig.height = 6 in inches\n- out.width=\"50%\": half of the width of the image container\n:::\n\n\n\n## Quarto Skills to the Next Level \n\n- [Quarto Website](https://quarto.org/)\n\n- [Get Started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)\n\n- [R for Data Science Ch-28 Quarto](https://r4ds.hadley.nz/quarto.html)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}