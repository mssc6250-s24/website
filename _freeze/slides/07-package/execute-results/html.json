{
  "hash": "cf4a868b4a2747bf8411b0a0c745fd8f",
  "result": {
    "markdown": "---\ntitle: 'R/Python Data Frames for Data Science `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M64 256V160H224v96H64zm0 64H224v96H64V320zm224 96V320H448v96H288zM448 256H288V160H448v96zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z\"/></svg>`{=html}'\nsubtitle: \"MATH/COSC 3570 Introduction to Data Science\"\nauthor: \"Dr. Cheng-Han Yu <br> Department of Mathematical and Statistical Sciences <br> Marquette University\"\n# date: \"December 23 2023\"\n# macros: _macros.tex # import a list of TeX/LaTeX definitions\nformat: \n  revealjs:\n    #     - \"macros.tex\"\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    # include-in-header:\n    highlight-style: arrow\n    code-block-bg: true\n    self-contained: false\n    slide-number: c/t\n    incremental: false\n    width: 1800\n    height: 1000\n    margin: 0.05\n    logo: \"https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg\"\n    footer: \"[math3570-s24.github.io/website](https://math3570-s24.github.io/website/)\"\n    theme: [\"simple\", \"slides.scss\"]\n    echo: true\n    multiplex: true\n    code-link: true\n    fig-cap-location: bottom\n    fig-align: center\n    transition: none ## fade slide convex concave zoom\n    title-slide-attributes:\n      data-background-color: \"#447099\"\n      # data-background-image: images/paper-texture.jpg\n      # data-background-size: cover\n      # data-background-color: \"#698ED5\"\neditor: source\nexecute:\n  freeze: true\n---\n\n\n#  {visibility=\"hidden\"}\n\n\\def\\bx{\\mathbf{x}}\n\\def\\bg{\\mathbf{g}}\n\\def\\bw{\\mathbf{w}}\n\\def\\bbeta{\\boldsymbol \\beta}\n\\def\\bX{\\mathbf{X}}\n\\def\\by{\\mathbf{y}}\n\\def\\bH{\\mathbf{H}}\n\\def\\bI{\\mathbf{I}}\n\\def\\bS{\\mathbf{S}}\n\\def\\bW{\\mathbf{W}}\n\\def\\T{\\text{T}}\n\\def\\cov{\\mathrm{Cov}}\n\\def\\cor{\\mathrm{Corr}}\n\\def\\var{\\mathrm{Var}}\n\\def\\E{\\mathrm{E}}\n\\def\\bmu{\\boldsymbol \\mu}\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\n\\def\\Trace{\\text{Trace}}\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n# {background-color=\"#A7D5E8\" background-image=\"images/07-package/tidyverse.svg\" background-size=\"30%\"}\n\n<h1>R Tidyverse</h1>\n\n\n## tidyverse 📦\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n- The [**tidyverse**](https://www.tidyverse.org/) is a 📦 for data science. \n- All packages share common design philosophy, grammar, and data structures.\n- The *core* tidyverse packages include\n  + [**ggplot2**](https://ggplot2.tidyverse.org/) - data visualisation\n  + [**dplyr**](https://dplyr.tidyverse.org/) - data manipulation\n  + [**tidyr**](https://tidyr.tidyverse.org/) - data tidying\n  + [**readr**](https://readr.tidyverse.org/) - data importing\n  + [**purrr**](https://purrr.tidyverse.org/) - functional programming\n  + [**tibble**](https://tibble.tidyverse.org/) - improved data frame\n  + [**stringr**](https://stringr.tidyverse.org/) - working with strings\n  + [**forcats**](https://forcats.tidyverse.org/) - working with factors\n  + [**lubridate**](https://lubridate.tidyverse.org/) - working with date/times\n:::\n\n\n::: {.column width=\"60%\"}\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: https://github.com/spcanelon/tour-of-the-tidyverse](https://raw.githubusercontent.com/spcanelon/tour-of-the-tidyverse/master/images/pptx/tidyverse.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n::::\n\n## Workflow of Data Science with R packages\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: https://oliviergimenez.github.io/intro_tidyverse/#7](images/07-package/01_tidyverse_data_science.png){fig-align='center' width=65%}\n:::\n:::\n\n:::\n\n![](images/02-datascience/tidymodels.png){.absolute top=\"470\" right=\"510\" width=\"150\"}\n\n## Install and Load tidyverse 📦\n\n- tidyverse is loading *all* the core packages for us!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n── Attaching core tidyverse packages ──────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ──────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package to force all conflicts to become errors\n```\n:::\n\n\n. . .\n\n- Packages in the tidyverse change frequently. To check if updates are available:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidyverse_update()\nThe following packages are out of date:\n● dbplyr  (2.0.0 -> 2.1.0)\n● forcats (0.5.0 -> 0.5.1)\n● pillar  (1.4.7 -> 1.5.0)\nStart a clean R session then run:\ninstall.packages(c(\"dbplyr\", \"forcats\", \"pillar\"))\n```\n:::\n\n\n## [Tidymodels](https://www.tidymodels.org/) {visibility=\"hidden\"}\n\n- The **tidymodels** framework is a collection of packages for modeling and machine learning using tidyverse principles.\n\n- All packages share an underlying philosophy and a common grammar\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: https://rpubs.com/chenx/tidymodels_tutorial](./images/07-package/tidymodels.jpeg){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Install and Load tidymodels 📦 {visibility=\"hidden\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"tidymodels\"); library(tidymodels)\n── Attaching packages ─────────────────────── tidymodels 0.2.0 ──\n✔ broom        1.0.2     ✔ rsample      1.0.0\n✔ dials        1.0.0     ✔ tune         0.2.0\n✔ infer        1.0.2     ✔ workflows    0.2.6\n✔ modeldata    1.0.0     ✔ workflowsets 0.2.1\n✔ parsnip      1.0.0     ✔ yardstick    1.0.0\n✔ recipes      1.0.0     \n── Conflicts ────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n```\n:::\n\n\nWe'll use tidymodels in the second half of the course.\n\n\n\n::: notes\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidymodels_update()\nThe following packages are out of date:\n• cli          (3.4.1 -> 3.6.0)\n• dials        (1.0.0 -> 1.1.0)\n• infer        (1.0.2 -> 1.0.4)\n• modeldata    (1.0.0 -> 1.0.1)\n• parsnip      (1.0.0 -> 1.0.3)\nStart a clean R session then run:\ninstall.packages(c(\"cli\", \"dials\", \"infer\", \"modeldata\", \"parsnip\"))\n```\n:::\n\n:::\n\n\n\n## Tidy Data (Data Matrix)\n\n> **\"Happy families are all alike; every unhappy family is unhappy in its own way.\"**\n> -- Leo Tolstoy\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/tidydata.png){fig-align='center' width=100%}\n:::\n:::\n\n\n- Each **variable** must have its own **column**.\n- Each **observation** must have its own **row**.\n- Each **value** must have its own **cell**. (match the corresponding row observation and column variable)\n\n\n## Tidy Data (Data Matrix)\n\n> **\"Tidy datasets are all alike, but every messy dataset is messy in its own way.\"**\n> -- Hadley Wickham\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/tidydata.png){fig-align='center' width=100%}\n:::\n:::\n\n\n- Each **variable** must have its own **column**.\n- Each **observation** must have its own **row**.\n- Each **value** must have its own **cell**. (match the corresponding row observation and column variable)\n\n::: notes\n- Remember in this course we are working on the so-called tidy data. \n- One of the goals of tidyverse is to make our data tidy.\n- So before we actually get into tidyverse, Let's define tidy data first.\n- **\"Tidy datasets are all alike, but every messy dataset is messy in its own way.\"**\n- Tidy data require that \n    + Each **variable** must have its own **column**. (name-value match)\n    + Each **observation** must have its own **row**. **The observation** could be human being or any object observed in the data set. A row corresponds to an observation.\n    + Each **value** must have its own **cell**.\n:::\n\n\n## Why Tidy Data?\n\n1. Each variable must have its own column.\n2. Each observation must have its own row.\n3. Each value must have its own cell.\n\n  \n. . .\n\n- Advantages of tidy data:\n  + If you store all data in a tidy way, you only need to learn the tools that work with them.\n  + Placing variables in columns allows R’s *vectorised* nature to shine. That makes transforming tidy data feel natural.\n\n\n. . .\n\n- Practical instructions:\n\n  > **Put each dataset in a data frame.**\n  \n  > **Put each variable in a column.**\n\n\n::: notes\n\n- These three rules are interrelated; it's impossible to only satisfy two of the three.\n- Remember, **\"Tidy datasets are all alike, but every messy dataset is messy in its own way.\"**\n- Remember, R prefer vectorized programming style. If each variable corresponds to a column vector, it is easy to transform variables using vectorised functions.\n- We will learn how to make our data tidy using **tidyr**, **dplyr** and other packages in **Data Wrangling** weeks.\n:::\n\n##\n\n::: {.question}\nWhat makes this data not tidy?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: [Army Air Forces Statistical Digest, WW II](https://www.ibiblio.org/hyperwar/AAF/StatDigest/aafsd-3.html)](images/07-package/hyperwar-airplanes-on-hand.png){fig-align='center' width=90%}\n:::\n:::\n\n\n<!-- .footnote[ -->\n<!-- Source: [Army Air Forces Statistical Digest, WW II](https://www.ibiblio.org/hyperwar/AAF/StatDigest/aafsd-3.html) -->\n<!-- ] -->\n\n::: notes\n- Here shows an example of non-tidy data set.\n- This is a data set is about aircraft during WWII 1939 to 1945.\n- You can see that we have some merge cell showing year, for example 1939 and 1940, saying that the rows come after those belong to that year.\n- But if we were to make this data tidy, we would actually have another column called year, and that column would indicate the values like 1939.\n- And that would be repeated for each row.\n- So we don;t want these merge cells in what we call in a tidy data set.\n- Some non-tidy data can be visually appealing for purposes of communicating.\n- But when we are working with data and analyzing data, we want this sort of information to be stored in its own column.\n- And you can see we also have some merge cells for historical events, like Germany invaded Poland. \n- That might be important when we are visualizing data. \n- And we should think about if these history events are parts of our analysis. If yes, we need to create one or more columns for those events. If they are just for annotation, and not important in our analysis or modeling, we might actually ignore them.\n:::\n\n\n\n##\n:::{.question}\nWhat makes this data not tidy?\n:::\n\n<br>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: [Gapminder, Estimated HIV prevalence among 15-49 year olds](https://www.gapminder.org/data)](images/07-package/hiv-est-prevalence-15-49.png){fig-align='center' width=95%}\n:::\n:::\n\n\n<!-- .footnote[ -->\n\n<!-- ] -->\n\n\n::: notes\n- This data set is from gapminder, which is a website that maintains lots of country level data.\n- The data set estimate HIV prevalence between age 15 to 49. \n- What makes this data not tidy is that the orange cell A1 is basically a title for our data set. But A1 should be a variable name or column name, which is Country if you can tell.\n:::\n\n\n\n\n## Data Frames Store Tidy Data\n\n- Collecting information about the distributions of colors and defects in a bag of M&Ms.\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n:::{.center}\n**Non-tidy Data**\n:::\n\n- If you import data in this format into R/Python, you will be in a mess. \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/bad_format.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n:::{.center}\n**Tidy Data**\n:::\n\n- Each row is for one M&M. Each variable is in each column. One value is in a cell.\n\n- Don't code **\"Red\"** in one place and **\"RED\"** in another. *Be consistent!*\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/case_format.png){fig-align='center' width=60%}\n:::\n:::\n\n:::\n:::\n::::\n\n::: notes\n- You are gonna find it difficult to deal with this data when you do later visualization and data analysis.\n- Don't code **\"Red\"** with capital R in one place and **\"RED\"** with all capital letters in another. R treats those as two values.\n- consistent in labeling values for categorical variables.\n:::\n\n\n\n# {background-color=\"#A7D5E8\" background-image=\"images/07-package/tibble.png\" background-size=\"30%\"}\n\n::: {.left}\n<h1> Modern </h1>\n<h1> Data Frames </h1>\n:::\n\n\n\n## Tibbles\n- Tibbles are modern version of R **data frames**. \n- Create a new tibble using `tibble()`.\n- It is like `base::data.frame()`, but with a couple differences.\n\n\n::::: {.columns}\n\n:::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:5, \n                 y = letters[1:5], \n                 z = 5:1)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y z\n1 1 a 5\n2 2 b 4\n3 3 c 3\n4 4 d 2\n5 5 e 1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n::::\n\n\n:::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntib <- tibble(x = 1:5, \n              y = letters[1:5], \n              z = 5:1)\ntib\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x y         z\n  <int> <chr> <int>\n1     1 a         5\n2     2 b         4\n3     3 c         3\n4     4 d         2\n5     5 e         1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(tib)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n:::\n\n::::\n\n:::::\n\n::: notes\n- Now we are going discuss the differences between tibble and data frame.\n:::\n\n\n## Printing of **data.frame** Class\n\n<!-- - This is the `iris` dataset, which is a class of **data.frame**. -->\n\n::: {.question}\nHow the printing method of data.frame can be improved? (Check `iris` in your R console)\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\niris\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.my_class600}\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n```\n:::\n:::\n\n\n::: notes\n- print entire data set out.\n- does not show much information.\n:::\n\n\n\n## Tibbles Display Better\n- `as_tibble()` turns a data frame or matrix into a tibble.\n\n\n::: {.cell layout-align=\"center\" highlight.output='[1,3]' highlight-output='c(1, 3)'}\n\n```{.r .cell-code}\n(iris_tbl <- as_tibble(iris))  ## check iris_tbl in your R console\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n1          5.1         3.5          1.4         0.2 setosa \n2          4.9         3            1.4         0.2 setosa \n3          4.7         3.2          1.3         0.2 setosa \n4          4.6         3.1          1.5         0.2 setosa \n5          5           3.6          1.4         0.2 setosa \n6          5.4         3.9          1.7         0.4 setosa \n# ℹ 144 more rows\n```\n:::\n:::\n\n\n- Only shows the first couple of rows.\n\n- Prints data *size* and *column type*.\n\n- Control the default appearance, like `options(tibble.print_max = n, tibble.print_min = m)`: if there are more than $n$ rows, print only the first $m$ rows.\n\n::: notes\n- Only shows the first *10 rows* and *all the columns that fit on one screen*. This makes it easier to work with large data.\n- Prints data size and column type.\n- Control the default appearance, like `options(tibble.print_max = n, tibble.print_min = m)`: if there are more than $n$ rows, print only the first $m$ rows.\n\nhttps://stackoverflow.com/questions/36848785/how-do-i-reset-all-options-arguments-to-their-default-values\n\n:::\n\n\n## Subsets of base::data.frame May Not be Data Frames\n- Sometimes `[]` returns a data frame and sometimes it just returns a vector.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:3, \n                 y = 3:1, \n                 z = LETTERS[1:3])\ndf[, 1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 3\n2 2 2\n3 3 1\n```\n:::\n\n```{.r .cell-code}\nclass(df[, 1:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nclass(df[, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n:::{.question}\n<!-- - Treat the df as a matrix. What additional argument we need to preserve its data frame type? -->\nTreat the df as a list. How do we grab the 1st column and preserve its data frame type?\n:::\n\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x\n1 1\n2 2\n3 3\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n:::\n\n\n\n:::\n\n::::\n\n\n\n::: notes\n- Remember we can use `[]` to subset a data frame. Right?\n- df[, 1, drop=FALSE]\n\n:::\n\n\n\n## Subsets of Tibbles Are Tibbles\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- [`[]` always returns another tibble.]{.green}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_tbl <- tibble(x = 1:2, y = 2:1, \n                 z = LETTERS[1:2])\ndf_tbl[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n      x\n  <int>\n1     1\n2     2\n```\n:::\n\n```{.r .cell-code}\ndf_tbl[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n      x\n  <int>\n1     1\n2     2\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" highlight.output='true'}\n\n```{.r .cell-code}\nclass(df_tbl[, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nclass(df_tbl[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n:::\n\n\n\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n- [`$` and `[[]]` return a vector.]{.green}\n\n\n::: {.cell layout-align=\"center\" highlight.output='true'}\n\n```{.r .cell-code}\ndf_tbl$x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\nclass(df_tbl$x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n<br>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_tbl[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\nclass(df_tbl[[1]])  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n:::\n:::\n::::\n\n::: notes\n- Tibbles are quite strict about subsetting\n:::\n\n\n## Tibbles Never Do Partial Matching\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- [Data frames do **partial matching**]{.green}\n\n- *Treat name \"a\" as \"abc\"!*\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(df <- data.frame(abc = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  abc\n1   1\n```\n:::\n\n```{.r .cell-code}\ndf$a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n:::\n\n\n\n::: {.column width=\"50%\"}\n::: {.gragment}\n\n- [Tibbles **never do** partial matching]{.green}\n\n- *Name \"a\" cannot be recognized!*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(tib <- tibble(abc = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n    abc\n  <dbl>\n1     1\n```\n:::\n\n```{.r .cell-code}\ntib$a\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `a`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n:::\n:::\n::::\n\n\n## Tibbles Can Have Complex Entries\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- [**Data frame**: Columns can't be defined using other created variables.]{.green}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata.frame(x = 1:5, \n           y = 1:5, \n           z = x + 3)\n# object 'x' not found\n```\n:::\n\n\n- [**Tibble**: Allow to refer to created variables.]{.green}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble(x = 1:5, \n       y = 1:5, \n       z = x + 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x     y     z\n  <int> <int> <dbl>\n1     1     1     4\n2     2     2     5\n3     3     3     6\n4     4     4     7\n5     5     5     8\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n- [**Data frame**: Columns need to be atomic vectors.]{.green}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata.frame(id = c(1, 2, 3), \n           func = c(mean, median, sd))\n# function can't be in a data.frame\n```\n:::\n\n\n- [**Tibble**: Elements can be lists or functions.]{.green}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble(id = c(1, 2, 3), \n       func = c(mean, median, sd))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n     id func  \n  <dbl> <list>\n1     1 <fn>  \n2     2 <fn>  \n3     3 <fn>  \n```\n:::\n:::\n\n:::\n:::\n::::\n\n\n::: notes\n- Columns need to be atomic vectors of numbers, strings, or logical values\n- Can have more complex objects, such as lists or functions.\n:::\n\n\n\n\n# {background-color=\"#A7D5E8\" background-image=\"https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/pipe.png\" background-size=\"30%\"}\n\n::: {.left}\n<h1> Pipe Operator </h1>\n:::\n\n\n## Pipes\n\n- The pipe `%>%` comes from the **magrittr** package of **tidyverse**.\n\n. . .\n\n- R (4.1+) has *native base pipe operator* ` |> `. Tools > Global Options > Code\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/native-pipe.png){fig-align='center' width=60%}\n:::\n:::\n\n\n:::{.callout-note}\n\n:::{style=\"font-size: 1.2em;\"}\nFor simple cases `|>` and `%>%` behave identically. The base pipe is recommended because we can use ` |> ` anywhere anytime in R, even we don't use tidyverse.\n:::\n\n:::\n\n::: notes\nhttps://r4ds.hadley.nz/data-transform.html#sec-the-pipe\n:::\n\n\n## What and How to Use Pipe\n\n- To add the pipe, use keyboard shortcut `Ctrl/Cmd + Shift + M`\n\n- The pipe *sends* *the result of the left side* of the pipe to be the **first argument** of the function *on the right side* of the pipe.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/07-package/pipe.png){fig-align='center' width=50%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n16 |> sqrt() |> log2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nlog2(sqrt(16))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n## We can define other arguments as if the first argument is already defined\n16 |> sqrt() |> log(base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n\n\n\n\n## Why Pipe Operator? \n- Nested vs. Sequential-piped\n- More natural and easier-to-read structure\n\n\n::: small\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: https://www.andrewheiss.com/](images/07-package/pipe_example.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n\n::: notes\n- Nested vs. Sequential-piped\n- Writing it out using pipes give it a more natural and easier-to-read structure.\n- You can think about the following sequence of actions - wake up, get out of bed, get dressed, and leave house.\n- Expressed as a set of nested functions in R would look like \n- Writing it out using pipes give it a more natural and easier to read structure (if you think so)\n- Like if-else statements, people don't like too many nested layers. We can easily get lost about what is actually doing.\n- Using pipe operator, we have a clear sequential order, and all the actions or functions will be shown at the beginning of each line, making the code easier to read.\n:::\n\n\n## \n:::::{.lab}\n\n<span style=\"color:blue\"> **08-Tibbles and Pipes** </span>\n\nIn **lab.qmd** `## Lab 8` section,\n\n- Compare and contrast the following operations on a `data.frame` and equivalent `tibble`. What are the differences?\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .my_class500 .cell-code}\ndf <- data.frame(abc = 1:2, \n                 xyz = c(\"a\", \"b\"))\n# list method\ndf$x\ndf[[2]]\ndf[\"xyz\"]\ndf[c(\"abc\", \"xyz\")]\n# matrix method\ndf[, 2]\ndf[, \"xyz\"]\ndf[, c(\"abc\", \"xyz\")]\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .my_class500 .cell-code}\ntib <- tibble(abc = 1:2, \n              xyz = c(\"a\", \"b\"))\n# list method\ntib$x\ntib[[2]]\ntib[\"xyz\"]\ntib[c(\"abc\", \"xyz\")]\n# matrix method\ntib[, 2]\ntib[, \"xyz\"]\ntib[, c(\"abc\", \"xyz\")]\n```\n:::\n\n:::\n::::\n\n- Use ` |> ` to first select last 12 rows of `iris` data set using `tail()`, then provides summary statistics on its columns using `summary()`.\n\n:::::\n\n\n\n# {background-color=\"#ffde57\" background-image=\"https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg\" background-size=\"50%\"}\n\n\n::: {.left}\n<h1> Pandas </h1>\n:::\n\n\n\n## Pandas\n\n- Like **tidyverse** in R, **pandas** is a Python library that provides data structures, manipulation and analysis tools for data science.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n- A Pandas Series is like a *column vector* in a data frame.\n\n- It is a one-dimensional array holding data *of any type*.\n\n\n## Pandas Series from a List\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n# import pandas as pd\na = [1, 7, 2]\ns = pd.Series(a)\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    1\n1    7\n2    2\ndtype: int64\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nprint(s[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## index used as naming \ns = pd.Series(a, index = [\"x\", \"y\", \"z\"])\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx    1\ny    7\nz    2\ndtype: int64\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nprint(s[\"y\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n:::\n\n\n\n## Pandas Series from a Dictionary\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ngrade = {\"math\": 99, \"stats\": 97, \"cs\": 66}\ns = pd.Series(grade)\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmath     99\nstats    97\ncs       66\ndtype: int64\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ngrade = {\"math\": 99, \"stats\": 97, \"cs\": 66}\n\n## index used as subsetting \ns = pd.Series(grade, index = [\"stats\", \"cs\"])\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstats    97\ncs       66\ndtype: int64\n```\n:::\n:::\n\n\n. . .\n\n::: {.question}\nHow do we create a named vector in R?\n:::\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrade <- c(\"math\" = 99, \"stats\" = 97, \"cs\" = 66)\n```\n:::\n\n\n## Pandas Data Frame\n\n-  Create a data frame from a dictionary\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndata = {\"math\": [99, 65, 87], \"stats\": [92, 48, 88], \"cs\": [50, 88, 94]}\n\ndf = pd.DataFrame(data)\nprint(df) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   math  stats  cs\n0    99     92  50\n1    65     48  88\n2    87     88  94\n```\n:::\n:::\n\n\n. . .\n\n- Row and column names\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.index = [\"s1\", \"s2\", \"s3\"]\ndf.columns = [\"Math\", \"Stat\", \"CS\"]\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n\n\n## Subsetting Columns\n:::{.callout-warning}\n\n:::{style=\"font-size: 1.1em;\"}\n- In Python, `[]` returns *Series*, `[[]]` returns *DataFrame*!\n- In R, `[]` returns *tibble*, `[[]]` returns *vector*!\n:::\n\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n \n<!-- **By Names** -->\n \n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## Series\ndf[\"Math\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ns1    99\ns2    65\ns3    87\nName: Math, dtype: int64\n```\n:::\n\n```{.python .cell-code}\ntype(df[\"Math\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n<!-- **By Index** -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n# ## DataFrame\ndf[[\"Math\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math\ns1    99\ns2    65\ns3    87\n```\n:::\n\n```{.python .cell-code}\ntype(df[[\"Math\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf[[\"Math\", \"CS\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  CS\ns1    99  50\ns2    65  88\ns3    87  94\n```\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n::: notes\nisinstance(df[[\"Math\"]], pd.DataFrame)\n:::\n\n\n## Subsetting Rows `DataFrame.iloc`\n\n- **integer-location** based indexing for selection by position\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## first row Series\ndf.iloc[0] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMath    99\nStat    92\nCS      50\nName: s1, dtype: int64\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## first row DataFrame\ndf.iloc[[0]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## first 2 rows\ndf.iloc[[0, 1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## 1st and 3rd row\ndf.iloc[[True, False, True]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns3    87    88  94\n```\n:::\n:::\n\n\n:::\n::::\n\n\n## Subsetting Rows and Columns `DataFrame.iloc`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## (1, 3) row and (1, 3) col\ndf.iloc[[0, 2], [0, 2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  CS\ns1    99  50\ns3    87  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## all rows and 1st col\ndf.iloc[:, [True, False, False]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math\ns1    99\ns2    65\ns3    87\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.iloc[0:2, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Stat  CS\ns1    92  50\ns2    48  88\n```\n:::\n:::\n\n\n\n:::\n::::\n\n\n## Subsetting Rows and Columns `DataFrame.loc`\n\nAccess a group of rows and columns by **label(s)**\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.loc['s1', \"CS\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n## all rows and 1st col\ndf.loc['s1':'s3', [True, False, False]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math\ns1    99\ns2    65\ns3    87\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.loc['s2', ['Math', 'Stat']]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMath    65\nStat    48\nName: s2, dtype: int64\n```\n:::\n:::\n\n\n:::\n::::\n\n\n## Obtain a Single Cell Value `DataFrame.iat`/ `DataFrame.at`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.iat[1, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n88\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.iloc[0].iat[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n92\n```\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.at['s2', 'Stat']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n48\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.loc['s1'].at['Stat']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n92\n```\n:::\n:::\n\n\n:::\n::::\n\n## New Columns `DataFrame.insert` and New Rows `pd.concat`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  CS\ns1    99    92  50\ns2    65    48  88\ns3    87    88  94\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf.insert(loc = 2, \n          column = \"Chem\", \n          value = [77, 89, 76])\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Math  Stat  Chem  CS\ns1    99    92    77  50\ns2    65    48    89  88\ns3    87    88    76  94\n```\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\ndf1 = pd.DataFrame({\n    \"Math\": 88, \n    \"Stat\": 99, \n    \"Chem\": 0, \n    \"CS\": 100\n    }, index = ['s4'])\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\npd.concat(objs = [df, df1], \n          ignore_index = True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Math  Stat  Chem   CS\n0    99    92    77   50\n1    65    48    89   88\n2    87    88    76   94\n3    88    99     0  100\n```\n:::\n:::\n\n\n:::\n\n:::\n\n::::\n\n# {background-color=\"#ffde57\" background-image=\"https://upload.wikimedia.org/wikipedia/commons/3/31/NumPy_logo_2020.svg\" background-size=\"50%\"}\n\n::: {.left}\n<h1> NumPy </h1>\n:::\n\n## NumPy\n\n- **NumPy** is used to work with arrays/matrices. \n\n- The array object in NumPy is called `ndarray`.\n\n- Use `array()` to create an array.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport numpy as np\nrange(0, 5, 1) # a seq of number from 0 to 4 with increment of 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrange(0, 5)\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\narr = np.array(range(0, 5, 1)) ## One-dim array \nprint(arr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0 1 2 3 4]\n```\n:::\n\n```{.python .cell-code}\nprint(type(arr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'numpy.ndarray'>\n```\n:::\n:::\n\n\n. . .\n\n`np.arange`: Efficient way to create a one-dim array of sequence of numbers\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nnp.arange(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7])\n```\n:::\n:::\n\n\n\n## 2D Array (Matrix) and 3D Array\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nnp.array([[1, 2, 3], [4, 5, 6]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1, 2, 3],\n       [4, 5, 6]])\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nnp.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[[1, 2, 3],\n        [4, 5, 6]],\n\n       [[1, 2, 3],\n        [4, 5, 6]]])\n```\n:::\n:::\n\n\n## `np.reshape()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\narr2 = np.arange(8).reshape(2, 4)\narr2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n```\n:::\n\n```{.python .cell-code}\narr2.shape  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2, 4)\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\narr2.ndim\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\narr2.size\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8\n```\n:::\n:::\n\n\n\n\n\n## Stacking Arrays\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\na = np.array([1, 2, 3, 4]).reshape(2, 2)\nb = np.array([5, 6, 7, 8]).reshape(2, 2)\n\nnp.vstack((a, b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1, 2],\n       [3, 4],\n       [5, 6],\n       [7, 8]])\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nnp.hstack((a, b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1, 2, 5, 6],\n       [3, 4, 7, 8]])\n```\n:::\n:::\n\n\n\n## \n:::{.lab}\n\n<span style=\"color:blue\"> **09-NumPy and pandas** </span>\n\nIn **lab.qmd** `## Lab 9` section, create a Python pandas.DataFrame equivalent to the R tibble\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble(x = 1:5, y = 5:1, z = LETTERS[1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x     y z    \n  <int> <int> <chr>\n1     1     5 A    \n2     2     4 B    \n3     3     3 C    \n4     4     2 D    \n5     5     1 E    \n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport string\nlist(string.ascii_uppercase)\ndic = {'__': ____________, \n       '__': reversed(____________),\n       '__': list(string.ascii_uppercase)[______]}\npd._____________(dic)\n```\n:::\n\n\n:::\n\n\n## Lab Bonus!\n\n- Happy Valentine's Day! ❤️\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- seq(0, 2*pi, by = 0.01)\nxhrt <- 16 * sin(x) ^ 3\nyhrt <- 13 * cos(x) - 5 * cos(2*x) - 2 * cos(3*x) - cos(4*x)\npar(mar = c(0, 0, 0, 0))\nplot(xhrt, yhrt, type = \"l\", axes = FALSE, xlab = \"\", ylab = \"\")\npolygon(xhrt, yhrt, col = \"red\", border = NA)\npoints(c(10,-10, -15, 15), c(-10, -10, 10, 10), pch = 169, font = 5)\ntext(0, 0, \"Happy Valentine's Day!\", font = 2, cex = 2, col = \"pink\")\n```\n:::\n\n\n\n## Resources\n\n- [tibble](https://tibble.tidyverse.org/)\n- [pipes](https://r4ds.hadley.nz/workflow-pipes.html#why-use-a-pipe)\n- [NumPy](https://numpy.org/doc/stable/user/index.html)\n- [pandas](https://pandas.pydata.org/docs/user_guide/index.html)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}